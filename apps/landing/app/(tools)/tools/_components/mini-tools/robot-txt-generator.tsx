'use client'
import React, { useState, useRef } from 'react';
import { Copy, Download, PlusCircle, Trash2, RefreshCw } from 'lucide-react';

interface RobotsRule {
  type: 'allow' | 'disallow';
  path: string;
  agent: string;
}

export const RobotsTxtGenerator: React.FC = () => {
  const [siteUrl, setSiteUrl] = useState('');
  const [rules, setRules] = useState<RobotsRule[]>([]);
  const [newRule, setNewRule] = useState<RobotsRule>({
    type: 'disallow',
    path: '',
    agent: '*'
  });
  const [generatedRobotsTxt, setGeneratedRobotsTxt] = useState('');
  const [copyStatus, setCopyStatus] = useState<'idle' | 'copied' | 'error'>('idle');
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const addRule = () => {
    if (newRule.path.trim()) {
      setRules([...rules, { ...newRule }]);
      setNewRule({ type: 'disallow', path: '', agent: '*' });
    }
  };

  const removeRule = (indexToRemove: number) => {
    setRules(rules.filter((_, index) => index !== indexToRemove));
  };

  const generateRobotsTxt = () => {
    const baseUrl = siteUrl.endsWith('/') ? siteUrl : `${siteUrl}/`;
    
    // Group rules by user agent
    const rulesByAgent = rules.reduce((acc, rule) => {
      if (!acc[rule.agent]) {
        acc[rule.agent] = [];
      }
      acc[rule.agent].push(rule);
      return acc;
    }, {} as Record<string, RobotsRule[]>);

    // Generate robots.txt content
    let robotsTxtContent = '# Robots.txt Generated by Olly RobotsTxtGenerator\n\n';
    
    // Add sitemap if site URL is provided
    if (siteUrl) {
      robotsTxtContent += `Sitemap: ${baseUrl}sitemap.xml\n\n`;
    }

    // Generate rules for each user agent
    Object.entries(rulesByAgent).forEach(([agent, agentRules]) => {
      robotsTxtContent += `User-agent: ${agent}\n`;
      
      agentRules.forEach(rule => {
        const fullPath = rule.path.startsWith('/') ? rule.path : `/${rule.path}`;
        robotsTxtContent += `${rule.type === 'allow' ? 'Allow' : 'Disallow'}: ${fullPath}\n`;
      });
      
      robotsTxtContent += '\n';
    });

    setGeneratedRobotsTxt(robotsTxtContent.trim());
  };

  const copyToClipboard = async () => {
    try {
      if (textareaRef.current) {
        textareaRef.current.select();
        await navigator.clipboard.writeText(generatedRobotsTxt);
        setCopyStatus('copied');
        
        // Reset copy status after 2 seconds
        setTimeout(() => {
          setCopyStatus('idle');
        }, 2000);
      }
    } catch (err) {
      console.error('Failed to copy:', err);
      setCopyStatus('error');
      
      // Reset copy status after 2 seconds
      setTimeout(() => {
        setCopyStatus('idle');
      }, 2000);
    }
  };

  const downloadRobotsTxt = () => {
    const blob = new Blob([generatedRobotsTxt], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'robots.txt';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const resetGenerator = () => {
    setSiteUrl('');
    setRules([]);
    setNewRule({ type: 'disallow', path: '', agent: '*' });
    setGeneratedRobotsTxt('');
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white rounded-xl shadow-lg">
  
      
      <div className="space-y-6">
        {/* Website URL Input */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <label htmlFor="siteUrl" className="block mb-2 text-sm font-medium text-gray-700">
            Website URL <span className="text-gray-500">(optional)</span>
          </label>
          <div className="flex">
            <input
              type="url"
              id="siteUrl"
              value={siteUrl}
              onChange={(e) => setSiteUrl(e.target.value)}
              placeholder="https://www.example.com"
              className="flex-grow px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button 
              onClick={resetGenerator}
              className="px-3 py-2 bg-red-500 text-white rounded-r-md hover:bg-red-600 transition duration-300"
              title="Reset Generator"
            >
              <RefreshCw size={20} />
            </button>
          </div>
        </div>

        {/* Rule Addition Section */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h3 className="text-lg font-semibold mb-3 text-gray-800">Add Crawling Rules</h3>
          <div className="flex space-x-2">
            <select
              value={newRule.type}
              onChange={(e) => setNewRule({...newRule, type: e.target.value as 'allow' | 'disallow'})}
              className="flex-shrink-0 px-2 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="disallow">Disallow</option>
              <option value="allow">Allow</option>
            </select>
            <input
              type="text"
              value={newRule.path}
              onChange={(e) => setNewRule({...newRule, path: e.target.value})}
              placeholder="/private-path or specific-file.html"
              className="flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <select
              value={newRule.agent}
              onChange={(e) => setNewRule({...newRule, agent: e.target.value})}
              className="flex-shrink-0 px-2 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="*">All Bots</option>
              <option value="Googlebot">Google</option>
              <option value="Bingbot">Bing</option>
              <option value="DuckDuckBot">DuckDuckGo</option>
            </select>
            <button
              onClick={addRule}
              className="px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition duration-300 flex items-center"
            >
              <PlusCircle size={20} className="mr-2" /> Add
            </button>
          </div>
        </div>

        {/* Current Rules Display */}
        {rules.length > 0 && (
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-3 text-gray-800">Current Rules</h3>
            <ul className="space-y-2">
              {rules.map((rule, index) => (
                <li 
                  key={index} 
                  className="flex justify-between items-center bg-white px-3 py-2 rounded-md shadow-sm"
                >
                  <span className="text-sm">
                    <span className={`font-medium ${rule.type === 'disallow' ? 'text-red-600' : 'text-green-600'}`}>
                      {rule.type === 'disallow' ? 'Disallow' : 'Allow'}
                    </span>{' '}
                    {rule.path} <span className="text-gray-500">(Agent: {rule.agent})</span>
                  </span>
                  <button
                    onClick={() => removeRule(index)}
                    className="text-red-500 hover:text-red-700 transition duration-300"
                    title="Remove Rule"
                  >
                    <Trash2 size={20} />
                  </button>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Generate Button */}
        <div>
          <button
            onClick={generateRobotsTxt}
            className="w-full px-4 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition duration-300 text-lg font-semibold"
          >
            Generate Robots.txt
          </button>
        </div>

        {/* Generated Robots.txt Section */}
        {generatedRobotsTxt && (
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-3 text-gray-800">Generated Robots.txt</h3>
            <textarea
              ref={textareaRef}
              readOnly
              value={generatedRobotsTxt}
              rows={8}
              className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md font-mono text-sm"
            />
            <div className="flex space-x-4 mt-4">
              <button
                onClick={copyToClipboard}
                className={`flex-grow flex items-center justify-center px-4 py-3 rounded-md transition duration-300 ${
                  copyStatus === 'copied' 
                    ? 'bg-green-500 text-white' 
                    : copyStatus === 'error'
                      ? 'bg-red-500 text-white'
                      : 'bg-blue-500 text-white hover:bg-blue-600'
                }`}
              >
                <Copy size={20} className="mr-2" />
                {copyStatus === 'copied' ? 'Copied!' : copyStatus === 'error' ? 'Copy Failed' : 'Copy to Clipboard'}
              </button>
              <button
                onClick={downloadRobotsTxt}
                className="flex-grow flex items-center justify-center px-4 py-3 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition duration-300"
              >
                <Download size={20} className="mr-2" />
                Download robots.txt
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};